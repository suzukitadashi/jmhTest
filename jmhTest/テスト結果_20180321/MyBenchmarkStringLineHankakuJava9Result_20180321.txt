# JMH version: 1.20
# VM version: JDK 9.0.4, VM 9.0.4+11
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call1StringLine

# Run progress: 0.00% complete, ETA 00:01:20
# Fork: 1 of 2
# Warmup Iteration   1: 78.683 ops/s
# Warmup Iteration   2: 93.086 ops/s
# Warmup Iteration   3: 92.685 ops/s
# Warmup Iteration   4: 93.161 ops/s
# Warmup Iteration   5: 93.417 ops/s
Iteration   1: 95.396 ops/s
Iteration   2: 95.135 ops/s
Iteration   3: 95.885 ops/s
Iteration   4: 95.995 ops/s
Iteration   5: 95.409 ops/s

# Run progress: 12.50% complete, ETA 00:01:14
# Fork: 2 of 2
# Warmup Iteration   1: 79.528 ops/s
# Warmup Iteration   2: 93.437 ops/s
# Warmup Iteration   3: 93.565 ops/s
# Warmup Iteration   4: 93.857 ops/s
# Warmup Iteration   5: 91.457 ops/s
Iteration   1: 95.046 ops/s
Iteration   2: 95.264 ops/s
Iteration   3: 95.822 ops/s
Iteration   4: 95.941 ops/s
Iteration   5: 93.950 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call1StringLine":
  95.384 Å}(99.9%) 0.925 ops/s [Average]
  (min, avg, max) = (93.950, 95.384, 95.995), stdev = 0.612
  CI (99.9%): [94.459, 96.310] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 9.0.4, VM 9.0.4+11
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call2StringConcat

# Run progress: 25.00% complete, ETA 00:01:03
# Fork: 1 of 2
# Warmup Iteration   1: 45.904 ops/s
# Warmup Iteration   2: 47.524 ops/s
# Warmup Iteration   3: 51.852 ops/s
# Warmup Iteration   4: 49.163 ops/s
# Warmup Iteration   5: 50.563 ops/s
Iteration   1: 51.080 ops/s
Iteration   2: 49.594 ops/s
Iteration   3: 50.585 ops/s
Iteration   4: 51.515 ops/s
Iteration   5: 51.398 ops/s

# Run progress: 37.50% complete, ETA 00:00:53
# Fork: 2 of 2
# Warmup Iteration   1: 46.209 ops/s
# Warmup Iteration   2: 47.655 ops/s
# Warmup Iteration   3: 51.075 ops/s
# Warmup Iteration   4: 50.902 ops/s
# Warmup Iteration   5: 51.275 ops/s
Iteration   1: 51.371 ops/s
Iteration   2: 51.508 ops/s
Iteration   3: 51.495 ops/s
Iteration   4: 51.595 ops/s
Iteration   5: 51.489 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call2StringConcat":
  51.163 Å}(99.9%) 0.949 ops/s [Average]
  (min, avg, max) = (49.594, 51.163, 51.595), stdev = 0.628
  CI (99.9%): [50.214, 52.112] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 9.0.4, VM 9.0.4+11
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call3StringBuffer

# Run progress: 50.00% complete, ETA 00:00:42
# Fork: 1 of 2
# Warmup Iteration   1: 57.599 ops/s
# Warmup Iteration   2: 60.960 ops/s
# Warmup Iteration   3: 61.720 ops/s
# Warmup Iteration   4: 63.706 ops/s
# Warmup Iteration   5: 63.925 ops/s
Iteration   1: 63.253 ops/s
Iteration   2: 64.725 ops/s
Iteration   3: 65.940 ops/s
Iteration   4: 66.514 ops/s
Iteration   5: 65.726 ops/s

# Run progress: 62.50% complete, ETA 00:00:31
# Fork: 2 of 2
# Warmup Iteration   1: 29.057 ops/s
# Warmup Iteration   2: 30.948 ops/s
# Warmup Iteration   3: 31.256 ops/s
# Warmup Iteration   4: 39.289 ops/s
# Warmup Iteration   5: 60.754 ops/s
Iteration   1: 61.371 ops/s
Iteration   2: 61.741 ops/s
Iteration   3: 61.827 ops/s
Iteration   4: 61.648 ops/s
Iteration   5: 60.225 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call3StringBuffer":
  63.297 Å}(99.9%) 3.407 ops/s [Average]
  (min, avg, max) = (60.225, 63.297, 66.514), stdev = 2.254
  CI (99.9%): [59.890, 66.704] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 9.0.4, VM 9.0.4+11
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call4StringBuilder

# Run progress: 75.00% complete, ETA 00:00:21
# Fork: 1 of 2
# Warmup Iteration   1: 67.691 ops/s
# Warmup Iteration   2: 70.058 ops/s
# Warmup Iteration   3: 71.468 ops/s
# Warmup Iteration   4: 72.847 ops/s
# Warmup Iteration   5: 73.739 ops/s
Iteration   1: 72.994 ops/s
Iteration   2: 73.806 ops/s
Iteration   3: 73.457 ops/s
Iteration   4: 73.825 ops/s
Iteration   5: 73.290 ops/s

# Run progress: 87.50% complete, ETA 00:00:10
# Fork: 2 of 2
# Warmup Iteration   1: 67.769 ops/s
# Warmup Iteration   2: 70.168 ops/s
# Warmup Iteration   3: 71.248 ops/s
# Warmup Iteration   4: 73.503 ops/s
# Warmup Iteration   5: 73.422 ops/s
Iteration   1: 73.592 ops/s
Iteration   2: 73.086 ops/s
Iteration   3: 73.554 ops/s
Iteration   4: 73.561 ops/s
Iteration   5: 73.526 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call4StringBuilder":
  73.469 Å}(99.9%) 0.415 ops/s [Average]
  (min, avg, max) = (72.994, 73.469, 73.825), stdev = 0.275
  CI (99.9%): [73.054, 73.884] (assumes normal distribution)


# Run complete. Total time: 00:01:25

Benchmark                                                 Mode  Cnt   Score   Error  Units
jmhTest.MyBenchmarkStringLineHankaku.call1StringLine     thrpt   10  95.384 Å} 0.925  ops/s
jmhTest.MyBenchmarkStringLineHankaku.call2StringConcat   thrpt   10  51.163 Å} 0.949  ops/s
jmhTest.MyBenchmarkStringLineHankaku.call3StringBuffer   thrpt   10  63.297 Å} 3.407  ops/s
jmhTest.MyBenchmarkStringLineHankaku.call4StringBuilder  thrpt   10  73.469 Å} 0.415  ops/s
