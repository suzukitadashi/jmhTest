# JMH version: 1.20
# VM version: JDK 10, VM 10+46
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call1StringLine

# Run progress: 0.00% complete, ETA 00:01:20
# Fork: 1 of 2
# Warmup Iteration   1: 80.834 ops/s
# Warmup Iteration   2: 92.873 ops/s
# Warmup Iteration   3: 92.622 ops/s
# Warmup Iteration   4: 93.050 ops/s
# Warmup Iteration   5: 93.568 ops/s
Iteration   1: 94.627 ops/s
Iteration   2: 94.682 ops/s
Iteration   3: 94.918 ops/s
Iteration   4: 95.281 ops/s
Iteration   5: 94.953 ops/s

# Run progress: 12.50% complete, ETA 00:01:14
# Fork: 2 of 2
# Warmup Iteration   1: 79.930 ops/s
# Warmup Iteration   2: 91.142 ops/s
# Warmup Iteration   3: 92.914 ops/s
# Warmup Iteration   4: 93.698 ops/s
# Warmup Iteration   5: 92.658 ops/s
Iteration   1: 93.594 ops/s
Iteration   2: 94.813 ops/s
Iteration   3: 94.868 ops/s
Iteration   4: 95.266 ops/s
Iteration   5: 95.115 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call1StringLine":
  94.812 Å}(99.9%) 0.728 ops/s [Average]
  (min, avg, max) = (93.594, 94.812, 95.281), stdev = 0.482
  CI (99.9%): [94.084, 95.540] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 10, VM 10+46
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call2StringConcat

# Run progress: 25.00% complete, ETA 00:01:03
# Fork: 1 of 2
# Warmup Iteration   1: 44.723 ops/s
# Warmup Iteration   2: 46.412 ops/s
# Warmup Iteration   3: 49.507 ops/s
# Warmup Iteration   4: 48.780 ops/s
# Warmup Iteration   5: 49.516 ops/s
Iteration   1: 49.620 ops/s
Iteration   2: 49.582 ops/s
Iteration   3: 49.597 ops/s
Iteration   4: 49.586 ops/s
Iteration   5: 49.505 ops/s

# Run progress: 37.50% complete, ETA 00:00:53
# Fork: 2 of 2
# Warmup Iteration   1: 44.287 ops/s
# Warmup Iteration   2: 46.318 ops/s
# Warmup Iteration   3: 48.046 ops/s
# Warmup Iteration   4: 46.252 ops/s
# Warmup Iteration   5: 49.002 ops/s
Iteration   1: 49.159 ops/s
Iteration   2: 49.287 ops/s
Iteration   3: 49.265 ops/s
Iteration   4: 49.293 ops/s
Iteration   5: 48.979 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call2StringConcat":
  49.387 Å}(99.9%) 0.335 ops/s [Average]
  (min, avg, max) = (48.979, 49.387, 49.620), stdev = 0.222
  CI (99.9%): [49.052, 49.722] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 10, VM 10+46
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call3StringBuffer

# Run progress: 50.00% complete, ETA 00:00:42
# Fork: 1 of 2
# Warmup Iteration   1: 56.135 ops/s
# Warmup Iteration   2: 58.833 ops/s
# Warmup Iteration   3: 59.654 ops/s
# Warmup Iteration   4: 61.131 ops/s
# Warmup Iteration   5: 61.016 ops/s
Iteration   1: 61.034 ops/s
Iteration   2: 61.143 ops/s
Iteration   3: 61.059 ops/s
Iteration   4: 61.070 ops/s
Iteration   5: 60.968 ops/s

# Run progress: 62.50% complete, ETA 00:00:31
# Fork: 2 of 2
# Warmup Iteration   1: 55.624 ops/s
# Warmup Iteration   2: 58.246 ops/s
# Warmup Iteration   3: 59.402 ops/s
# Warmup Iteration   4: 60.917 ops/s
# Warmup Iteration   5: 60.868 ops/s
Iteration   1: 61.021 ops/s
Iteration   2: 60.978 ops/s
Iteration   3: 61.025 ops/s
Iteration   4: 60.996 ops/s
Iteration   5: 60.971 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call3StringBuffer":
  61.026 Å}(99.9%) 0.082 ops/s [Average]
  (min, avg, max) = (60.968, 61.026, 61.143), stdev = 0.054
  CI (99.9%): [60.945, 61.108] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 10, VM 10+46
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call4StringBuilder

# Run progress: 75.00% complete, ETA 00:00:21
# Fork: 1 of 2
# Warmup Iteration   1: 90.474 ops/s
# Warmup Iteration   2: 95.548 ops/s
# Warmup Iteration   3: 97.248 ops/s
# Warmup Iteration   4: 94.444 ops/s
# Warmup Iteration   5: 98.617 ops/s
Iteration   1: 99.964 ops/s
Iteration   2: 100.308 ops/s
Iteration   3: 100.098 ops/s
Iteration   4: 100.487 ops/s
Iteration   5: 100.000 ops/s

# Run progress: 87.50% complete, ETA 00:00:10
# Fork: 2 of 2
# Warmup Iteration   1: 92.162 ops/s
# Warmup Iteration   2: 99.294 ops/s
# Warmup Iteration   3: 100.351 ops/s
# Warmup Iteration   4: 102.732 ops/s
# Warmup Iteration   5: 102.776 ops/s
Iteration   1: 103.135 ops/s
Iteration   2: 103.414 ops/s
Iteration   3: 103.312 ops/s
Iteration   4: 102.922 ops/s
Iteration   5: 102.358 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call4StringBuilder":
  101.600 Å}(99.9%) 2.326 ops/s [Average]
  (min, avg, max) = (99.964, 101.600, 103.414), stdev = 1.539
  CI (99.9%): [99.274, 103.926] (assumes normal distribution)


# Run complete. Total time: 00:01:24

Benchmark                                                 Mode  Cnt    Score   Error  Units
jmhTest.MyBenchmarkStringLineHankaku.call1StringLine     thrpt   10   94.812 Å} 0.728  ops/s
jmhTest.MyBenchmarkStringLineHankaku.call2StringConcat   thrpt   10   49.387 Å} 0.335  ops/s
jmhTest.MyBenchmarkStringLineHankaku.call3StringBuffer   thrpt   10   61.026 Å} 0.082  ops/s
jmhTest.MyBenchmarkStringLineHankaku.call4StringBuilder  thrpt   10  101.600 Å} 2.326  ops/s
