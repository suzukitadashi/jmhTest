# JMH version: 1.20
# VM version: JDK 9.0.4, VM 9.0.4+11
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: -XX:-CompactStrings -DCompactStringEnabled=false
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call1StringLine

# Run progress: 0.00% complete, ETA 00:01:20
# Fork: 1 of 2
# Warmup Iteration   1: 94.375 ops/s
# Warmup Iteration   2: 108.106 ops/s
# Warmup Iteration   3: 109.301 ops/s
# Warmup Iteration   4: 111.175 ops/s
# Warmup Iteration   5: 112.132 ops/s
Iteration   1: 112.423 ops/s
Iteration   2: 112.229 ops/s
Iteration   3: 112.502 ops/s
Iteration   4: 111.800 ops/s
Iteration   5: 112.101 ops/s

# Run progress: 12.50% complete, ETA 00:01:14
# Fork: 2 of 2
# Warmup Iteration   1: 94.566 ops/s
# Warmup Iteration   2: 108.205 ops/s
# Warmup Iteration   3: 109.518 ops/s
# Warmup Iteration   4: 109.267 ops/s
# Warmup Iteration   5: 109.391 ops/s
Iteration   1: 110.210 ops/s
Iteration   2: 111.099 ops/s
Iteration   3: 111.126 ops/s
Iteration   4: 110.647 ops/s
Iteration   5: 110.670 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call1StringLine":
  111.481 Å}(99.9%) 1.257 ops/s [Average]
  (min, avg, max) = (110.210, 111.481, 112.502), stdev = 0.831
  CI (99.9%): [110.224, 112.737] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 9.0.4, VM 9.0.4+11
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: -XX:-CompactStrings -DCompactStringEnabled=false
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call2StringConcat

# Run progress: 25.00% complete, ETA 00:01:03
# Fork: 1 of 2
# Warmup Iteration   1: 45.122 ops/s
# Warmup Iteration   2: 48.598 ops/s
# Warmup Iteration   3: 51.217 ops/s
# Warmup Iteration   4: 51.429 ops/s
# Warmup Iteration   5: 51.811 ops/s
Iteration   1: 51.708 ops/s
Iteration   2: 51.774 ops/s
Iteration   3: 51.719 ops/s
Iteration   4: 50.622 ops/s
Iteration   5: 51.421 ops/s

# Run progress: 37.50% complete, ETA 00:00:53
# Fork: 2 of 2
# Warmup Iteration   1: 44.884 ops/s
# Warmup Iteration   2: 47.796 ops/s
# Warmup Iteration   3: 51.623 ops/s
# Warmup Iteration   4: 51.618 ops/s
# Warmup Iteration   5: 51.722 ops/s
Iteration   1: 51.778 ops/s
Iteration   2: 51.786 ops/s
Iteration   3: 51.739 ops/s
Iteration   4: 51.409 ops/s
Iteration   5: 51.687 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call2StringConcat":
  51.564 Å}(99.9%) 0.543 ops/s [Average]
  (min, avg, max) = (50.622, 51.564, 51.786), stdev = 0.359
  CI (99.9%): [51.021, 52.107] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 9.0.4, VM 9.0.4+11
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: -XX:-CompactStrings -DCompactStringEnabled=false
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call3StringBuffer

# Run progress: 50.00% complete, ETA 00:00:42
# Fork: 1 of 2
# Warmup Iteration   1: 30.726 ops/s
# Warmup Iteration   2: 31.687 ops/s
# Warmup Iteration   3: 31.891 ops/s
# Warmup Iteration   4: 39.434 ops/s
# Warmup Iteration   5: 57.066 ops/s
Iteration   1: 57.168 ops/s
Iteration   2: 57.124 ops/s
Iteration   3: 56.990 ops/s
Iteration   4: 57.093 ops/s
Iteration   5: 57.092 ops/s

# Run progress: 62.50% complete, ETA 00:00:31
# Fork: 2 of 2
# Warmup Iteration   1: 30.306 ops/s
# Warmup Iteration   2: 31.628 ops/s
# Warmup Iteration   3: 31.933 ops/s
# Warmup Iteration   4: 39.388 ops/s
# Warmup Iteration   5: 56.870 ops/s
Iteration   1: 56.636 ops/s
Iteration   2: 57.052 ops/s
Iteration   3: 56.378 ops/s
Iteration   4: 57.035 ops/s
Iteration   5: 56.985 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call3StringBuffer":
  56.955 Å}(99.9%) 0.378 ops/s [Average]
  (min, avg, max) = (56.378, 56.955, 57.168), stdev = 0.250
  CI (99.9%): [56.577, 57.334] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 9.0.4, VM 9.0.4+11
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: -XX:-CompactStrings -DCompactStringEnabled=false
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call4StringBuilder

# Run progress: 75.00% complete, ETA 00:00:21
# Fork: 1 of 2
# Warmup Iteration   1: 95.144 ops/s
# Warmup Iteration   2: 102.211 ops/s
# Warmup Iteration   3: 104.553 ops/s
# Warmup Iteration   4: 106.886 ops/s
# Warmup Iteration   5: 106.790 ops/s
Iteration   1: 107.306 ops/s
Iteration   2: 107.079 ops/s
Iteration   3: 107.018 ops/s
Iteration   4: 107.179 ops/s
Iteration   5: 107.011 ops/s

# Run progress: 87.50% complete, ETA 00:00:10
# Fork: 2 of 2
# Warmup Iteration   1: 93.515 ops/s
# Warmup Iteration   2: 102.844 ops/s
# Warmup Iteration   3: 103.286 ops/s
# Warmup Iteration   4: 104.705 ops/s
# Warmup Iteration   5: 104.832 ops/s
Iteration   1: 105.097 ops/s
Iteration   2: 104.949 ops/s
Iteration   3: 105.149 ops/s
Iteration   4: 105.480 ops/s
Iteration   5: 105.257 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call4StringBuilder":
  106.153 Å}(99.9%) 1.557 ops/s [Average]
  (min, avg, max) = (104.949, 106.153, 107.306), stdev = 1.030
  CI (99.9%): [104.595, 107.710] (assumes normal distribution)


# Run complete. Total time: 00:01:25

Benchmark                                                 Mode  Cnt    Score   Error  Units
jmhTest.MyBenchmarkStringLineHankaku.call1StringLine     thrpt   10  111.481 Å} 1.257  ops/s
jmhTest.MyBenchmarkStringLineHankaku.call2StringConcat   thrpt   10   51.564 Å} 0.543  ops/s
jmhTest.MyBenchmarkStringLineHankaku.call3StringBuffer   thrpt   10   56.955 Å} 0.378  ops/s
jmhTest.MyBenchmarkStringLineHankaku.call4StringBuilder  thrpt   10  106.153 Å} 1.557  ops/s
