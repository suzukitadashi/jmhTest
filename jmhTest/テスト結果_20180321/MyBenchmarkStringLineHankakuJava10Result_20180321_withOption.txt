# JMH version: 1.20
# VM version: JDK 10, VM 10+46
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: -XX:-CompactStrings -DCompactStringEnabled=false
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call1StringLine

# Run progress: 0.00% complete, ETA 00:01:20
# Fork: 1 of 2
# Warmup Iteration   1: 71.730 ops/s
# Warmup Iteration   2: 94.582 ops/s
# Warmup Iteration   3: 93.390 ops/s
# Warmup Iteration   4: 98.558 ops/s
# Warmup Iteration   5: 102.340 ops/s
Iteration   1: 103.378 ops/s
Iteration   2: 106.416 ops/s
Iteration   3: 107.457 ops/s
Iteration   4: 108.144 ops/s
Iteration   5: 106.095 ops/s

# Run progress: 12.50% complete, ETA 00:01:14
# Fork: 2 of 2
# Warmup Iteration   1: 92.128 ops/s
# Warmup Iteration   2: 104.982 ops/s
# Warmup Iteration   3: 104.577 ops/s
# Warmup Iteration   4: 106.184 ops/s
# Warmup Iteration   5: 107.628 ops/s
Iteration   1: 108.325 ops/s
Iteration   2: 108.101 ops/s
Iteration   3: 108.234 ops/s
Iteration   4: 108.241 ops/s
Iteration   5: 108.385 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call1StringLine":
  107.278 Å}(99.9%) 2.415 ops/s [Average]
  (min, avg, max) = (103.378, 107.278, 108.385), stdev = 1.598
  CI (99.9%): [104.862, 109.693] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 10, VM 10+46
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: -XX:-CompactStrings -DCompactStringEnabled=false
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call2StringConcat

# Run progress: 25.00% complete, ETA 00:01:03
# Fork: 1 of 2
# Warmup Iteration   1: 42.725 ops/s
# Warmup Iteration   2: 45.242 ops/s
# Warmup Iteration   3: 47.830 ops/s
# Warmup Iteration   4: 47.561 ops/s
# Warmup Iteration   5: 48.960 ops/s
Iteration   1: 45.763 ops/s
Iteration   2: 48.063 ops/s
Iteration   3: 46.145 ops/s
Iteration   4: 48.169 ops/s
Iteration   5: 49.133 ops/s

# Run progress: 37.50% complete, ETA 00:00:52
# Fork: 2 of 2
# Warmup Iteration   1: 43.135 ops/s
# Warmup Iteration   2: 47.873 ops/s
# Warmup Iteration   3: 49.389 ops/s
# Warmup Iteration   4: 49.332 ops/s
# Warmup Iteration   5: 48.837 ops/s
Iteration   1: 43.405 ops/s
Iteration   2: 49.256 ops/s
Iteration   3: 46.442 ops/s
Iteration   4: 49.378 ops/s
Iteration   5: 49.252 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call2StringConcat":
  47.501 Å}(99.9%) 3.017 ops/s [Average]
  (min, avg, max) = (43.405, 47.501, 49.378), stdev = 1.996
  CI (99.9%): [44.483, 50.518] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 10, VM 10+46
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: -XX:-CompactStrings -DCompactStringEnabled=false
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call3StringBuffer

# Run progress: 50.00% complete, ETA 00:00:42
# Fork: 1 of 2
# Warmup Iteration   1: 51.826 ops/s
# Warmup Iteration   2: 53.118 ops/s
# Warmup Iteration   3: 51.637 ops/s
# Warmup Iteration   4: 55.745 ops/s
# Warmup Iteration   5: 54.245 ops/s
Iteration   1: 54.105 ops/s
Iteration   2: 54.883 ops/s
Iteration   3: 53.483 ops/s
Iteration   4: 57.584 ops/s
Iteration   5: 56.878 ops/s

# Run progress: 62.50% complete, ETA 00:00:31
# Fork: 2 of 2
# Warmup Iteration   1: 46.937 ops/s
# Warmup Iteration   2: 51.800 ops/s
# Warmup Iteration   3: 50.114 ops/s
# Warmup Iteration   4: 48.883 ops/s
# Warmup Iteration   5: 50.180 ops/s
Iteration   1: 51.683 ops/s
Iteration   2: 51.085 ops/s
Iteration   3: 55.923 ops/s
Iteration   4: 53.878 ops/s
Iteration   5: 56.010 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call3StringBuffer":
  54.551 Å}(99.9%) 3.218 ops/s [Average]
  (min, avg, max) = (51.085, 54.551, 57.584), stdev = 2.128
  CI (99.9%): [51.334, 57.769] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 10, VM 10+46
# VM invoker: C:\Program Files\Java\latest\bin\java.exe
# VM options: -XX:-CompactStrings -DCompactStringEnabled=false
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jmhTest.MyBenchmarkStringLineHankaku.call4StringBuilder

# Run progress: 75.00% complete, ETA 00:00:21
# Fork: 1 of 2
# Warmup Iteration   1: 91.172 ops/s
# Warmup Iteration   2: 100.538 ops/s
# Warmup Iteration   3: 101.733 ops/s
# Warmup Iteration   4: 102.914 ops/s
# Warmup Iteration   5: 103.655 ops/s
Iteration   1: 102.934 ops/s
Iteration   2: 102.978 ops/s
Iteration   3: 93.852 ops/s
Iteration   4: 93.662 ops/s
Iteration   5: 101.875 ops/s

# Run progress: 87.50% complete, ETA 00:00:10
# Fork: 2 of 2
# Warmup Iteration   1: 87.407 ops/s
# Warmup Iteration   2: 96.339 ops/s
# Warmup Iteration   3: 100.800 ops/s
# Warmup Iteration   4: 101.697 ops/s
# Warmup Iteration   5: 95.800 ops/s
Iteration   1: 88.181 ops/s
Iteration   2: 95.154 ops/s
Iteration   3: 101.343 ops/s
Iteration   4: 94.114 ops/s
Iteration   5: 102.893 ops/s


Result "jmhTest.MyBenchmarkStringLineHankaku.call4StringBuilder":
  97.699 Å}(99.9%) 8.031 ops/s [Average]
  (min, avg, max) = (88.181, 97.699, 102.978), stdev = 5.312
  CI (99.9%): [89.667, 105.730] (assumes normal distribution)


# Run complete. Total time: 00:01:24

Benchmark                                                 Mode  Cnt    Score   Error  Units
jmhTest.MyBenchmarkStringLineHankaku.call1StringLine     thrpt   10  107.278 Å} 2.415  ops/s
jmhTest.MyBenchmarkStringLineHankaku.call2StringConcat   thrpt   10   47.501 Å} 3.017  ops/s
jmhTest.MyBenchmarkStringLineHankaku.call3StringBuffer   thrpt   10   54.551 Å} 3.218  ops/s
jmhTest.MyBenchmarkStringLineHankaku.call4StringBuilder  thrpt   10   97.699 Å} 8.031  ops/s
